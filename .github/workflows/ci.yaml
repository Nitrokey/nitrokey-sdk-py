name: Continuous integration
on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REQUIRED_PACKAGES: make
  POETRY_SPEC: poetry >=2, <3

jobs:
  format-code:
    name: Check code format
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check code format
        run: make check-format
  format-import:
    name: Check imports sorting
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check code import format
        run: make check-import-sorting
  lint-style:
    name: Check code style
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check code style
        run: make check-style
  lint-typing:
    name: Check static typing
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check code static typing
        run: make check-typing
  lint-poetry:
    name: Check poetry configuration
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check poetry configuration
        run: make check-poetry
  lint-docs:
    name: Check documentation
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check docs
        run: make check-docs
  check-version-accordance:
    name: Check for version accordance
    runs-on: ubuntu-latest
    container: fedora:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: dnf makecache && dnf install -y make rpm-build python python-pip python3-devel gcc systemd-devel
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Check versions (Python package and RPM specification)
        shell: bash
        run: |
          PACKAGE_VERSION=$(poetry version --short | sed s'/-rc\./~rc/')
          RPM_VERSION=$(rpmspec -q --qf "%{version}" ci-scripts/linux/rpm/python3-nitrokey.spec)
          if [ $PACKAGE_VERSION == $RPM_VERSION ]; then exit 0; else exit 1; fi
  build-docs:
    name: Build documentation
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Build docs
        run: make build-docs
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Run test suite
        run: make test
  test-update:
    name: Run test suite with updated dependencies
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "poetry==2"
      - name: Create virtual environment
        run: make install
      - name: Update locked dependencies
        run: make update
      - name: Run test suite
        run: make test
  test-pip:
    name: Run test suite with pip installation
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install SDK
        run: pip install .
      - name: Run test suite
        run: python -m unittest -v
  test-readme:
    name: Run example code from readme
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES} cargo
      - name: Install tangler
        run: cargo install tangler@0.3.0
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Create virtual environment
        run: make install
      - name: Extract code from readme
        run: /github/home/.cargo/bin/tangler python < README.md > readme.py
      - name: Run code from readme
        run: poetry run python readme.py
  test-fido2-v2:
    name: Test against fido2 v2
    runs-on: ubuntu-latest
    container: python:3.10-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES}
      - name: Install Poetry
        run: pip install "${POETRY_SPEC}"
      - name: Update fido2 to v2
        run: poetry add --lock "fido2@^2"
      - name: Create virtual environment
        run: make install
      - name: Check code static typing
        run: make check-typing
      - name: Run test suite
        run: make test
  test-uv-resolution:
    name: Test different resolution strategies with uv
    runs-on: ubuntu-latest
    container: python:3.10-slim
    strategy:
      matrix:
        resolution:
          - lowest
          - lowest-direct
          - highest
    env:
      UV_RESOLUTION: ${{ matrix.resolution }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install required packages
        run: apt update && apt install -y ${REQUIRED_PACKAGES} gcc libffi-dev
      - name: Install uv
        run: pip install uv
      - name: Lock dependencies
        run: uv lock && uv tree --locked
      - name: Check code static typing
        run: make check-typing MYPY="uv run --locked mypy"
      - name: Run test suite
        run: make test PYTHON="uv run --locked python"
